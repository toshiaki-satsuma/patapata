title: Patapata Core サンプルアプリ
plurals:
  test1: これは{count, plural, other{#個}}の項目があるテストです。
errors:
  app:
    '000':
      title: エラー（{prefix}000）
      message: 不明エラーが発生しました。
    network:
      '404':
        title: エラー（{prefix}404）
        message: コンテンツが見つかりませんでした。
      '500':
        title: エラー（{prefix}500）
        message: サーバーエラーが発生しました。
      '503':
        title: サーバーメンテナンス
        message: 現在サーバーメンテンス中のため利用できません。トップページに戻ります。
        fix: トップ画面へ
pages:
  agreement:
    title: 同意画面
    body: これは同意画面です。承諾しますか？
    yes: はい
    no: いいえ
  top:
    title: Patapata サンプル トップ
    body: ここはPatapataのサンプルトップページです。
    go_to_config: Configのサンプル
    go_to_screen_layout: ScreenLayoutのサンプル
    go_to_repository_system: Repositoryのサンプル
    go_to_standard_page: StandardPageのサンプル
    go_to_device_and_pakage_info: DeviceInfoとPackageInfoのサンプル
    go_to_error: Errorのサンプル
    go_to_tab: Tabのサンプル
  config:
    title: Config サンプル
    body: ここはConfigのサンプルページです。
    increment: カウントを増やす
    clear: Local Configを削除する
  error:
    title: エラー サンプル
    body: ここはエラー機能のサンプルページです。
    example: 通常のエラー
    network: ネットワークエラー({prefix})
    maintenance: メンテナンス中エラー
    specific: ページ特有のエラー
  error_specific:
    title: ページ特有のエラー
    body: 前ページの「通常のエラー」と同じ例外を発生させますが、表示されるメッセージが異なります。
    example: テスト
    back: 戻る
    errors:
      app:
        '000':
          title: ページ特有のエラー（{prefix}000）
          message: ページ特有のエラーが発生しました。
  maintenance:
    title: サーバーメンテナンス
    message: 現在サーバーメンテンス中のため利用できません。トップページに戻ります。
  device_and_package_info:
    title: デバイスとパッケージ情報 サンプル
    body: ここはデバイス情報とパッケージ情報を取得するサンプルページです。
    model: デバイス名
    app_name: アプリ名
    build_number: ビルド番号
    build_signature: ビルドサイン（build signature）
    package_name: パッケージ名
    version: バージョン番号
  standard_page:
    title: StandardPage サンプル
    body: ここはStandardPageのサンプルページです。
    go_to_next_standard_page: 次のStandardPageへ
    go_to_custom_standard_page: カスタムStandardPageへ
    go_to_page_data: ページデータのサンプルへ
    page_data_value: PageDataの値:{prefix}
    change_page_data: PageDataの値を変更する
    page_data_count: PageDataのカウント数:{prefix}
    change_page_data_type: PageDataの型を変更
    change_page_data_result: 現在のPageDataの値:{prefix} 
  tab:
    home:
      title: ホーム
      body: ここはホームのタブです。
    title_details:
      title: タイトル詳細
      body: ここはタイトル詳細のタブです。
    my_page:
      title: マイページ
      body: ここはマイページのタブです。
  screen_layout_example:
    title: ScreenLayout サンプル
    body: ここはScreenLayoutのサンプルページです。
    sample_a: サンプルA
    sample_b: サンプルB
    base_description_before: |
      このSizedBoxは300x300として指定されており、左右のSizedBoxはそれぞれ幅が37.5です。
      実際の画面サイズに依存して、マージンが発生するか、Flutterが画面サイズが不足しているためにオーバーフローの警告を表示する可能性があります。
      ScreenLayout システムを使用することで、子要素の RenderSize は StandardBreakpoint で設定された値に基づいて拡大または縮小されます（ただし、maxScale を超えることはありません）。
      サンプルAは、ScreenLayoutを適用せずに生のオブジェクトです。
    base_description_after: |
      サンプルBは、サンプルAにScreenLayoutを適用した結果です。実際の画面サイズが450以下の場合、これは完璧なサイズになるはずです。
      これは、画面の幅に基づいて外観を急激に変更したくないウィジェットを作成する場合や、
      タブレットと非タブレットのデバイス間で相対的なサイズを整列させたい場合（たとえばダイアログを表示する場合など）に役立ちます。
    description_case_equal: デバイスの幅が{width}であるため、ウィジェットは完璧に表示されます。（ScreenLayoutの機能をテストしたい場合は、幅が375でないデバイスで実行してみてください）。
    description_case_over: デバイスの幅が{width}であるため、左右にマージンがあります。
    description_case_other: デバイスの幅が{width}であるため、オーバーフローの警告が表示されています。
    description_sample: |
      前述の例では、StandardBreakpointに基づいてRenderSizeをスケーリングする方法を示しましたが、実際のウィジェットサイズはその親のサイズに依存します。
      ただし、実際のサイズに制約を加えたい場合があります。そのような場合、ConstrainedWidthを使用できます。
      ConstrainedWidthを指定することで、実際のサイズを変更し、依然としてStandardBreakpointに基づいてRenderSizeを自動計算する利点を得ることができます。
      また、サイズを制約するためにScreenLayoutウィジェットをConstrainedBoxなどで囲むと効果的です。
      ウィジェットツリー内の状況に基づいて適切なアプローチを選択してください。
    description_example: 上記の例では、ConstrainedWidthの値が200に設定されています。これにより、実際のサイズが200に制限されますが、コンテンツの相対的な形状が保持されていることが観察されます。
  repository_example1:
    title: Repository Example
    explanation: |
      リポジトリは、その名前が示すようにデータを蓄積するための機能です。アプリ内で情報を扱うための基本的な機能を提供し、データの追加、更新、取得、Web API との同期などが可能です。また、情報のキャッシュ時間の設定、蓄積の制限、LRU（Least Recently Used）を用いた古い情報の削除なども行えます。一度設定すれば、アプリ内のどこからでも BuildContext を通じて情報にアクセスできます。

      この機能は以下の特性を持っています：

      1. 情報のカプセル化
        例えば、SNS（ソーシャル・ネットワーキング・サービス）を考えてみましょう。リスト画面では「タイトル」と「日付」のみが必要ですが、詳細画面では「本文」などの重い情報が必要になります。そのため、Web API は通常、別々に準備されます。アプリ側でこれらを処理する際、多くの場合、同じデータクラスを使用し、取得されていない情報を空文字や null で初期化します。しかし、データが存在するため、リスト画面で誤って「本文」にアクセスしてしまうリスクがあります。
        これを防ぐために、「セット（sets）」という概念が提供されています。同じデータクラスを使用しつつも、「セット」を通じて情報にアクセスすることで、不要な情報へのアクセスをブロックできます。コードレベルでアクセスを制限することで、プログラマーの混乱を防ぐことが可能です。例えば、リスト画面用の「セット」を用意すれば、リスト画面で「本文」へのアクセスを防げます。この「セット」の仕組みは複雑ですが、簡単に作成できるビルダーが提供されているため、簡単に利用できます。詳しい構築方法や使用方法については、サンプルを参照してください。

      2. 情報の更新とウィジェットの再構築最適化
        SNS の例を続けると、「いいね」ボタンを押すと、全体の「いいね」の数が更新され、ウィジェットが再構築されます。特に対策をしないと、そのデータクラスに関連するすべてのウィジェットが再構築されてしまいます。これを防ぐために、ウィジェットは「セット」単位で構築されます。前述の「セット」を使用することで、自動的に最適化が行われます。
    default_example:
      explanation1: |
        RepositoryProvider は可変データを保存するのに適したフォーマットです。
        データモデルが ProviderModel を継承する必要があるなどの制約がありますが、アプリのどこからでもデータに簡単にアクセスして変更できることや、変更による再構築の最適化などの利点があります。
      explanation2: |
        サンプルのデータ構造は以下のようになっています。この画面では DataListSet が使用されています。
        translationDate はアクセスできませんが、説明のために表示されています。
    object_example:
      explanation1: |
        ObjectProvider は、不変データや変更頻度の低いデータを保存するのに適したフォーマットです。
        RepositoryProvider とは異なり、保存するデータの型に制約がないため、より便利に使用できます。
        データの型が Listenable の場合、子要素の階層へ変更通知を行いますが、変更頻度が高いデータの場合は、最適化の観点から RepositoryProvider の使用を推奨します。
  repository_example2:
    title: Repository Example
    explanation1: |
      この画面では DataListSet が使用されています。元のクラスもまた、すべての変数にアクセス可能な「セット」として扱われます。
    explanation2: |
      前の画面では、counter2 と translationDate へのアクセスが禁止されており、さらに translationDate は初期化されていませんでした
      しかし、この画面に遷移すると translationDate が更新され、アクセス可能になります。
    explanation3: |
      リセットボタンを押すとデータがリセットされますが、translationDate がリセットされないことに気づくかもしれません。これは、リポジトリ経由でデータを更新する際、translationDate が未初期化のまま渡されたためです。逆に、この画面へ遷移する際には translationDate のみが初期化されました。
      このように、リポジトリでデータを更新する際、一部の情報を未初期化のままにすることで、キャッシュ内のデータと統合することが可能です。もちろん、通常通り変数を直接更新することもできます。