title: Patapata Core Sample App
plurals:
  test1: This is a test with {count, plural, other{# items}}.
errors:
  app:
    '000':
      title: Error ({prefix}000)
      message: Unknown Error.
    network:
      '404':
        title: Error ({prefix}404)
        message: Contents not found.
      '500':
        title: Error ({prefix}500)
        message: Internal server error.
      '503':
        title: Error ({prefix}503)
        message: Service Unavailable. The server is currently undergoing maintenance.
        fix: Go to Top Page
pages:
  agreement:
    title: Agreement
    body: This is the agreement page. Do you accept?
    yes: Yes
    no: No
  top:
    title: Patapata Sample Top
    body: This is the sample top page of Patapata.
    go_to_config: Config Sample
    go_to_screen_layout: ScreenLayout Sample
    go_to_repository_system: Repository Sample
    go_to_standard_page: StandardPage Sample
    go_to_device_and_pakage_info: Device And PackageInfo Sample
    go_to_error: Error Sample
    go_to_tab: Tab Sample
  config:
    title: Config Sample
    body: This is the sample page of Config.
    increment: Increment Count
    clear: Clear Local Config Count
  error:
    title: Error Sample
    body: This is the sample page of Error.
    example: Normal Error
    network: Network Error({prefix})
    maintenance: Maintenance Error
    specific: Page Specific Error
  error_specific:
    title: Page Specific Error
    body: It raises the same exception as the “Normal Error” on the previous page, but the message displayed is different.
    example: Test
    back: Back
    errors:
      app:
        '000':
          title: Page Specific Error ({prefix}000)
          message: Specific Error.
  maintenance:
    title: Server Maintenance
    message: Currently unavailable due to server maintenance. Returning to the Top Page.
  device_and_package_info:
    title: Sample of Device and Package Information
    body: This is a sample page for retrieving device information and package information.
    model: device name
    app_name: app name
    build_number: build number
    build_signature: build signature
    package_name: package name
    version: version number
  standard_page:
    title: StandardPage Sample
    body: This is a sample page of StandardPage.
    go_to_next_standard_page: Go to next StandardPage
    go_to_custom_standard_page: Go to Custom StandardPage
    go_to_page_data: Go to Page Data Sample
    page_data_value: PageData Value:{prefix}
    change_page_data: Change PageData
    page_data_count: PageData Count:{prefix}
    change_page_data_type: Change PageData Type
    change_page_data_result: Current PageData Value:{prefix} 
  tab:
    home:
      title: Home
      body: This is the home tab.
    title_details:
      title: Title Details
      body: This is the title details tab.
    my_page:
      title: My Page
      body: This is the my page tab.
  screen_layout_example:
    title: ScreenLayout Sample
    body: This is a sample of ScreenLayout.
    sample_a: Sample A
    sample_b: Sample B
    base_description_before: |
      This SizedBox is specified as 300x300, and the SizedBoxes on the left and right have a Width of 37.5.
      Depending on the actual screen size, there may be margins or Flutter may display an overflow warning due to insufficient screen size.
      By using the ScreenLayout system, the RenderSize of the child is scaled up or down based on the values set in the StandardBreakpoint (but it never exceeds the maxScale).
      Sample A is the raw object without applying ScreenLayout.
    base_description_after: |
      Sample B is the result of applying ScreenLayout to Sample A. If the actual screen size is 450 or less, it should be the perfect size. 
      This is useful when creating widgets that you don\'t want to drastically change their appearance based on screen width or when you want to align relative sizes
      between tablets and non-tablet devices, for example, when displaying dialogs. 
    description_case_equal: Due to your device width of {width}, so the widget is displayed perfectly. (If you want to test the functionality of ScreenLayout, please try running it on a device with a width other than 375).
    description_case_over: Due to your device width of {width}, there are margins on the left and right.
    description_case_other: Due to your device width of {width}, an overflow warning is being displayed.
    description_sample: |
      In the previous example, we demonstrated scaling the RenderSize based on the StandardBreakpoint. However, the actual widget size depends on the size of its parent. 
      However, there are cases where you may want to impose restrictions on the actual size. In such cases, you can use ConstrainedWidth. 
      By specifying ConstrainedWidth, you can change the actual size and still benefit from the automatic calculation of RenderSize based on the StandardBreakpoint. 
      It is also effective to enclose the ScreenLayout widget with a ConstrainedBox or similar approach to restrict the size. 
      Please choose the appropriate approach based on the situation in your widget tree. 
    description_example: In the above example, the value of ConstrainedWidth is set to 200. This limits the actual size to 200, but it can be observed that the relative shape of the content is preserved.
  repository_example1:
    title: Repository Example
    explanation: |
      A Repository is a feature designed to accumulate data, as the name suggests. It provides essential functionalities for handling information in the app, such as adding, updating, retrieving, and synchronizing with Web APIs. It also allows setting cache time for information, imposing limits on accumulation, and clearing old information with LRU, among other capabilities. Once configured, you can interact with information from anywhere in the app through the BuildContext.

      It provides the following features:

      1. Information Encapsulation
        For example, consider a social networking service (SNS). On the list screen, you may only need "title" and "date." However, on the detailed screen, heavy information such as "body" is required. To optimize, Web APIs are likely prepared separately for each. When dealing with them in the app, most cases involve handling them on the same data class and initializing unretrieved information with empty strings or null. However, since the data exists, there is a risk of accessing "body" on the list screen. To prevent this, the concept of "sets" is provided. Although it's the same data class, by accessing information through "sets," you can block unnecessary information. By blocking access at the code level, it's possible to prevent programmer confusion. In the example, by preparing a "set" for the list screen, you can prevent access to "body" on the list screen. The mechanism of "sets" is complex, but a builder for "sets" is provided, making it easy to create. For preparation for building and detailed usage, please refer to the Example.

      2. Information Update and Optimization of Widget Rebuilds
        Continuing with the SNS example, if you press the "like button," the overall number of likes is updated, and the widget is rebuilt. If nothing is done, all widgets associated with the data class will be rebuilt. To prevent this, widgets are built on a "set" basis. Regarding this, using the "sets" from 1 enables automatic optimization.
    default_example:
      explanation1: |
        RepositoryProvider is a suitable format for storing mutable data. There are constraints, such as the data model needing to inherit from ProviderModel.
        However, it offers advantages such as easy access and modification of data from anywhere in the app, and optimization of rebuilds due to changes.
      explanation2: |
        The sample data structure is as follows. DataListSet is used on this screen.
        translationDate cannot be accessed, but it is displayed for explanatory purposes.
    object_example:
      explanation1: |
        ObjectProvider is a suitable format for storing immutable data or data with infrequent changes.
        It is more convenient to use than RepositoryProvider because there are no constraints on the type of data to store.
        While it notifies changes to the child hierarchy if the data type is Listenable, for data with frequent changes,
        it is recommended to use RepositoryProvider from an optimization perspective.
  repository_example2:
    title: Repository Example
    explanation1: |
      On this screen, DataListSet is used. The original class is also treated as a set that allows access to all variables.
    explanation2: |
      On the previous screen, access to counter2 and translationDate was prohibited in the set.
      Additionally, translationDate was not initialized.
      When transitioning to this screen, translationDate was updated, making it accessible.
    explanation3: |
      Pressing the reset button will reset the data, but you may notice that translationDate is not reset.
      This is because when updating the data through the repository, translationDate was passed without initialization.
      Conversely, when transitioning to this screen, only translationDate was initialized.
      In this way, when updating data on the repository, it is possible to merge data on the cache with information by not initializing parts in the model.
      Of course, it is also possible to update variables directly as usual.